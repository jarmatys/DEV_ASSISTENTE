@page "/questions/{QuestionId:guid}"

@using ASSISTENTE.Contract.Requests.Internal.Questions.Queries.GetQuestion
@using ASSISTENTE.UI.Brokers.Implementations
@using ASSISTENTE.UI.Components

@inject IQuestionsBroker QuestionsBroker
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Question details</PageTitle>

@if (_response is not null)
{
    <MudGrid Class="mb-3">
        <MudItem xs="12" sm="12">
            <h2 class="mb-2">
                Question
                <MudChip Size="Size.Small" Color="Color.Success">@_response.Context</MudChip>
            </h2>
            @_response.Text
        </MudItem>
    </MudGrid>

    <MudGrid Class="mb-3">
        <MudItem xs="12" sm="12">
            <h2 class="mb-2">Answer</h2>
            @if (_response.Answer is not null)
            {
                <MarkdownArea Content="@_response.Answer"/>
            }
            else
            {
                <p>Generation in progress, please wait...</p>
            }
        </MudItem>
    </MudGrid>

    <MudGrid Class="mb-3">
        <MudItem xs="12" sm="12">
            <h2 class="mb-2">Resources used</h2>
            <MudSimpleTable Hover="true" Dense="true">
                <thead>
                <tr>
                    <th>Content</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @if (_response.Resources.Any())
                {
                    foreach (var resource in _response.Resources)
                    {
                        <tr>
                            <td>@resource.Title</td>
                            <td>
                                <MudButton Variant="Variant.Filled"
                                           StartIcon="@Icons.Material.Filled.Search"
                                           Color="Color.Info"
                                           Size="Size.Small"
                                           OnClick="() => Redirect(resource.ResourceId)">
                                    Resource
                                </MudButton>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2">No resources found...</td>
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
        </MudItem>
    </MudGrid>
    
    <MudGrid Class="mb-3">
        <MudItem xs="12" sm="12">
            <h2 class="mb-2">Files used</h2>
            <MudSimpleTable Hover="true" Dense="true">
                <thead>
                <tr>
                    <th>File name</th>
                </tr>
                </thead>
                <tbody>
                @if (_response.Files.Any())
                {
                    foreach (var files in _response.Files)
                    {
                        <tr>
                            <td>@files.Text</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="1">No files attached to this question...</td>
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
        </MudItem>
    </MudGrid>
}

@code {

    [Parameter] public Guid QuestionId { get; set; }

    private GetQuestionResponse? _response;

    protected override async Task OnInitializedAsync()
    {
        var response = await QuestionsBroker.GetQuestionAsync(GetQuestionRequest.Create(QuestionId));

        if (response.IsSuccess)
        {
            _response = response.Content;
        }
        else
        {
            Snackbar.Add("Error during loading question details...", Severity.Error);
        }
    }

    private void Redirect(Guid resourceId) => NavigationManager.NavigateTo($"/resources/{resourceId}");

}