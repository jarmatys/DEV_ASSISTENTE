@page "/resources"

@using ASSISTENTE.Contract.Requests.Internal.Knowledge.Queries.GetResources
@using ASSISTENTE.Contract.Requests.Internal.Knowledge.Queries.GetResources.Models
@using ASSISTENTE.UI.Brokers.Implementations

@inject IResourcesBroker ResourcesBroker
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Questions</PageTitle>

<MudTable Dense="true"
          Items="@_resources"
          Hover="true"
          Breakpoint="Breakpoint.Sm"
          Loading="_isLoading"
          RowsPerPage="@Elements"
          LoadingProgressColor="Color.Info">

    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Context</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Type">
            <MudChip T="string" Size="Size.Small" Color="Color.Success">@context.Type</MudChip>
        </MudTd>
        <MudTd>
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Search"
                       Color="Color.Info"
                       Size="Size.Small"
                       OnClick="() => Redirect(context.ResourceId)">
                Details
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@_pages" Class="pa-4"/>
    </PagerContent>
    
</MudTable>

@code {
    
    private int _pages = 0;
    private const int Elements = 10;

    private List<ResourceDto> _resources = [];
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await SetPagesCount();
        await GetRecords(page: 1);
    }

    private async Task SetPagesCount()
    {
        var response = await ResourcesBroker.GetResourcesCountAsync();

        if (response.IsSuccess)
        {
            var count = response.Content!.Count;

            _pages = count / Elements + 1;
        }
        else
        {
            Snackbar.Add("Error during loading records count...", Severity.Error);
        }
    }

    private async Task GetRecords(int page)
    {
        _isLoading = true;

        var response = await ResourcesBroker.GetResourcesAsync(GetResourcesRequest.Create(page, Elements));

        if (response.IsSuccess)
        {
            _resources = response.Content!.Resources;
        }
        else
        {
            Snackbar.Add("Error during loading resources to table...", Severity.Error);
        }

        _isLoading = false;
    }

    private async Task PageChanged(int page) => await GetRecords(page);

    private void Redirect(Guid resourceId) => NavigationManager.NavigateTo($"/resources/{resourceId}");

}